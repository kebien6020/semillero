{"version":3,"names":[],"mappings":"","sources":["fluidos_map_campos.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function(root, factory) {\n\n\tif (root === null) {\n\t\tthrow new Error('Google-maps package can be used only in browser');\n\t}\n\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.GoogleMapsLoader = factory();\n\t}\n\n})(typeof window !== 'undefined' ? window : null, function() {\n\n\n\t'use strict';\n\n\n\tvar googleVersion = '3.18';\n\n\tvar script = null;\n\n\tvar google = null;\n\n\tvar loading = false;\n\n\tvar callbacks = [];\n\n\tvar onLoadEvents = [];\n\n\tvar originalCreateLoaderMethod = null;\n\n\n\tvar GoogleMapsLoader = {};\n\n\n\tGoogleMapsLoader.URL = 'https://maps.googleapis.com/maps/api/js';\n\n\tGoogleMapsLoader.KEY = null;\n\n\tGoogleMapsLoader.LIBRARIES = [];\n\n\tGoogleMapsLoader.CLIENT = null;\n\n\tGoogleMapsLoader.CHANNEL = null;\n\n\tGoogleMapsLoader.LANGUAGE = null;\n\n\tGoogleMapsLoader.REGION = null;\n\n\tGoogleMapsLoader.VERSION = googleVersion;\n\n\tGoogleMapsLoader.WINDOW_CALLBACK_NAME = '__google_maps_api_provider_initializator__';\n\n\n\tGoogleMapsLoader._googleMockApiObject = {};\n\n\n\tGoogleMapsLoader.load = function(fn) {\n\t\tif (google === null) {\n\t\t\tif (loading === true) {\n\t\t\t\tif (fn) {\n\t\t\t\t\tcallbacks.push(fn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tloading = true;\n\n\t\t\t\twindow[GoogleMapsLoader.WINDOW_CALLBACK_NAME] = function() {\n\t\t\t\t\tready(fn);\n\t\t\t\t};\n\n\t\t\t\tGoogleMapsLoader.createLoader();\n\t\t\t}\n\t\t} else if (fn) {\n\t\t\tfn(google);\n\t\t}\n\t};\n\n\n\tGoogleMapsLoader.createLoader = function() {\n\t\tscript = document.createElement('script');\n\t\tscript.type = 'text/javascript';\n\t\tscript.src = GoogleMapsLoader.createUrl();\n\n\t\tdocument.body.appendChild(script);\n\t};\n\n\n\tGoogleMapsLoader.isLoaded = function() {\n\t\treturn google !== null;\n\t};\n\n\n\tGoogleMapsLoader.createUrl = function() {\n\t\tvar url = GoogleMapsLoader.URL;\n\n\t\turl += '?callback=' + GoogleMapsLoader.WINDOW_CALLBACK_NAME;\n\n\t\tif (GoogleMapsLoader.KEY) {\n\t\t\turl += '&key=' + GoogleMapsLoader.KEY;\n\t\t}\n\n\t\tif (GoogleMapsLoader.LIBRARIES.length > 0) {\n\t\t\turl += '&libraries=' + GoogleMapsLoader.LIBRARIES.join(',');\n\t\t}\n\n\t\tif (GoogleMapsLoader.CLIENT) {\n\t\t\turl += '&client=' + GoogleMapsLoader.CLIENT + '&v=' + GoogleMapsLoader.VERSION;\n\t\t}\n\n\t\tif (GoogleMapsLoader.CHANNEL) {\n\t\t\turl += '&channel=' + GoogleMapsLoader.CHANNEL;\n\t\t}\n\n\t\tif (GoogleMapsLoader.LANGUAGE) {\n\t\t\turl += '&language=' + GoogleMapsLoader.LANGUAGE;\n\t\t}\n\n\t\tif (GoogleMapsLoader.REGION) {\n\t\t\turl += '&region=' + GoogleMapsLoader.REGION;\n\t\t}\n\n\t\treturn url;\n\t};\n\n\n\tGoogleMapsLoader.release = function(fn) {\n\t\tvar release = function() {\n\t\t\tGoogleMapsLoader.KEY = null;\n\t\t\tGoogleMapsLoader.LIBRARIES = [];\n\t\t\tGoogleMapsLoader.CLIENT = null;\n\t\t\tGoogleMapsLoader.CHANNEL = null;\n\t\t\tGoogleMapsLoader.LANGUAGE = null;\n\t\t\tGoogleMapsLoader.REGION = null;\n\t\t\tGoogleMapsLoader.VERSION = googleVersion;\n\n\t\t\tgoogle = null;\n\t\t\tloading = false;\n\t\t\tcallbacks = [];\n\t\t\tonLoadEvents = [];\n\n\t\t\tif (typeof window.google !== 'undefined') {\n\t\t\t\tdelete window.google;\n\t\t\t}\n\n\t\t\tif (typeof window[GoogleMapsLoader.WINDOW_CALLBACK_NAME] !== 'undefined') {\n\t\t\t\tdelete window[GoogleMapsLoader.WINDOW_CALLBACK_NAME];\n\t\t\t}\n\n\t\t\tif (originalCreateLoaderMethod !== null) {\n\t\t\t\tGoogleMapsLoader.createLoader = originalCreateLoaderMethod;\n\t\t\t\toriginalCreateLoaderMethod = null;\n\t\t\t}\n\n\t\t\tif (script !== null) {\n\t\t\t\tscript.parentElement.removeChild(script);\n\t\t\t\tscript = null;\n\t\t\t}\n\n\t\t\tif (fn) {\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\n\t\tif (loading) {\n\t\t\tGoogleMapsLoader.load(function() {\n\t\t\t\trelease();\n\t\t\t});\n\t\t} else {\n\t\t\trelease();\n\t\t}\n\t};\n\n\n\tGoogleMapsLoader.onLoad = function(fn) {\n\t\tonLoadEvents.push(fn);\n\t};\n\n\n\tGoogleMapsLoader.makeMock = function() {\n\t\toriginalCreateLoaderMethod = GoogleMapsLoader.createLoader;\n\n\t\tGoogleMapsLoader.createLoader = function() {\n\t\t\twindow.google = GoogleMapsLoader._googleMockApiObject;\n\t\t\twindow[GoogleMapsLoader.WINDOW_CALLBACK_NAME]();\n\t\t};\n\t};\n\n\n\tvar ready = function(fn) {\n\t\tvar i;\n\n\t\tloading = false;\n\n\t\tif (google === null) {\n\t\t\tgoogle = window.google;\n\t\t}\n\n\t\tfor (i = 0; i < onLoadEvents.length; i++) {\n\t\t\tonLoadEvents[i](google);\n\t\t}\n\n\t\tif (fn) {\n\t\t\tfn(google);\n\t\t}\n\n\t\tfor (i = 0; i < callbacks.length; i++) {\n\t\t\tcallbacks[i](google);\n\t\t}\n\n\t\tcallbacks = [];\n\t};\n\n\n\treturn GoogleMapsLoader;\n\n});\n\n},{}],2:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar $ = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\n$('.success-panel, .error-panel').addClass('alert fade in');\n$().alert();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],3:[function(require,module,exports){\n(function (global){\n'use strict';\n\nrequire('./app.js');\n\nvar _map = require('./map.js');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _jquery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar plot_options = {\n    series: {\n        pie: {\n            show: true,\n            radius: 1,\n            label: {\n                radius: 3 / 4,\n                show: true,\n                background: {\n                    opacity: 0.5,\n                    color: '#000'\n                },\n                formatter: labelFormatter\n            }\n        }\n    },\n    legend: { show: false },\n    grid: {\n        hoverable: true,\n        clickable: true\n    }\n};\n\nfunction labelFormatter(label, series) {\n    var val = series.data[0][1];\n    var pct = Math.round(series.percent);\n    return '\\n    <div class=\"plot-label\">\\n        <label>' + label + '</label>\\n        <div>' + val + ' (' + pct + '%)</div>\\n    </div>';\n}\n\nvar markers_data = {\n    title_key: 'name',\n    longitude_key: 'longitude',\n    latitude_key: 'latitude',\n    color_mode: 'none',\n    on_open_marker: setupMarker\n};\n\n// Global DOM Elements\nvar $overlay = void 0,\n    $leftPlot = void 0,\n    $rightPlot = void 0,\n    $fieldName = void 0,\n    $fluidName = void 0,\n    $minDensFl = void 0,\n    $maxDensFl = void 0,\n    $minDensFi = void 0,\n    $maxDensFi = void 0,\n    $wellCount = void 0;\n\nfunction init() {\n    cacheDOM();\n    bindHandlers();\n    getMapData().then(setupMap, handleMapError);\n}\n\nfunction cacheDOM() {\n    $overlay = (0, _jquery2.default)('#fullscreen-overlay');\n    $leftPlot = $overlay.find('#left-plot');\n    $rightPlot = $overlay.find('#right-plot');\n    $fieldName = $overlay.find('#field-name');\n    $fluidName = $overlay.find('#fluid-name');\n    $minDensFl = $overlay.find('#min-dens-fl');\n    $maxDensFl = $overlay.find('#max-dens-fl');\n    $minDensFi = $overlay.find('#min-dens-fi');\n    $maxDensFi = $overlay.find('#max-dens-fi');\n    $wellCount = $overlay.find('#total-events');\n}\n\nfunction bindHandlers() {\n    $overlay.click(fadeOverlay);\n}\n\nfunction fadeOverlay(event) {\n    if (this === event.target) {\n        (0, _jquery2.default)(this).fadeOut();\n        $leftPlot.unbind('plotclick');\n    }\n}\n\nfunction getMapData() {\n    return _jquery2.default.getJSON('/api/fluidos/fields');\n}\n\nfunction setupMap(fields) {\n    markers_data.data = fields;\n\n    _map2.default.load(function () {\n        _map2.default.setupMarkers(markers_data);\n    });\n}\n\nfunction handleMapError() {\n    alert('Error cargando los datos del mapa desde el servidor');\n}\n\n// Note: setupMarker and setupMarkers *are* different.\n// See markers_data.on_open_marker\nfunction setupMarker(infoWindow, field) {\n    // Infowindow\n    var plotId = 'plot_' + field.id;\n    if ((0, _jquery2.default)('#' + plotId).length > 0) return;\n\n    var plotHtml = '\\n        <div style=\"width:250px; height:250px;\" id=\"' + plotId + '\">\\n        </div>';\n\n    var content = infoWindow.getContent();\n    content += plotHtml;\n    infoWindow.setContent(content);\n\n    var dist = field.distribution;\n    var data = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = dist[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var fluid = _step.value;\n\n            data.push({\n                label: fluid.name,\n                data: fluid.occurrences,\n                color: fluid.color,\n                fluid_id: fluid.id\n            });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var $plot = (0, _jquery2.default)('#' + plotId);\n    _jquery2.default.plot($plot, data, plot_options);\n\n    // Listen to plotclick\n    $plot.bind('plotclick', function (event, pos, obj) {\n        markerPlotClick(event, obj, field.id, data);\n    });\n}\n\nfunction markerPlotClick(event, obj, field_id, data) {\n    var fluid_id = obj.series.fluid_id;\n    // Overlay\n    $overlay.fadeIn();\n\n    // Empty DOM elements\n    emptyAll();\n\n    // Field info\n    getFieldInfo(field_id).then(setupFieldInfo, handleFieldInfoError);\n\n    // Left plot contents\n    _jquery2.default.plot($leftPlot, data, plot_options);\n\n    // Right plot contents\n    setupRightPlot(field_id, fluid_id);\n\n    // Listen to plotclick\n    $leftPlot.bind('plotclick', function (event, pos, obj) {\n        leftPlotClick(event, obj, field_id);\n    });\n}\n\nfunction leftPlotClick(event, obj, field_id) {\n    var fluid_id = obj.series.fluid_id;\n    setupRightPlot(field_id, fluid_id);\n}\n\n// Empty sections wich are going to be filled by the request\nfunction emptyRightPlot() {\n    $rightPlot.empty();\n    $fluidName.empty();\n    $minDensFl.empty();\n    $maxDensFl.empty();\n}\n\nfunction emptyAll() {\n    $fieldName.empty();\n    $wellCount.empty();\n    $minDensFi.empty();\n    $maxDensFi.empty();\n    emptyRightPlot();\n}\n\nfunction getFieldInfo(field_id) {\n    return _jquery2.default.getJSON('/api/fluidos/field_info/' + field_id);\n}\n\nfunction setupFieldInfo(_ref) {\n    var name = _ref.name;\n    var min = _ref.min;\n    var max = _ref.max;\n    var well_count = _ref.well_count;\n\n    $fieldName.html(name);\n    renderDens($minDensFi, min);\n    renderDens($maxDensFi, max);\n    $wellCount.html(well_count);\n}\n\nfunction handleFieldInfoError() {\n    alert('Error obteniendo estadisticas del campo');\n}\n\nfunction setupRightPlot(field_id, fluid_id) {\n    emptyRightPlot();\n    getRightPlot(field_id, fluid_id).then(renderRightPlot, handlePlotError);\n}\n\nfunction getRightPlot(field_id, fluid_id) {\n    return _jquery2.default.getJSON('/api/fluidos/density_dist/' + field_id + '/' + fluid_id);\n}\n\nfunction renderRightPlot(data) {\n    if (data.ranges.length < 1) {\n        $rightPlot.html('<p class=\"error\">No se han definido rangos</p>');\n    } else {\n        var plot_data = [];\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = data.ranges[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var range = _step2.value;\n\n                var label = void 0;\n                if (range.range === null) {\n                    label = 'No reporta densidad';\n                } else {\n                    // ES6 Object destructuring\n                    var _range$range = range.range;\n                    var _min = _range$range.min;\n                    var _max = _range$range.max;\n                    // ES6 Template literal\n\n                    label = _min + ' PPG - ' + _max + ' PPG';\n                }\n                plot_data.push({\n                    label: label,\n                    data: range.occurrences\n                });\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n\n        _jquery2.default.plot($rightPlot, plot_data, plot_options);\n    }\n    $fluidName.html(data.fluid_name);\n\n    // ES6 Object destructuring\n    var min = data.min;\n    var max = data.max;\n\n\n    renderDens($minDensFl, min);\n    renderDens($maxDensFl, max);\n}\n\nfunction renderDens(elem, model) {\n    if (model !== null) elem.html(model.value + ' (pozo ' + model.well + ')');else elem.html('No hay información');\n}\n\nfunction handlePlotError() {\n    $rightPlot.html('<p class=\"error\">Error comunicandose al servidor</p>');\n}\n\ninit();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./app.js\":2,\"./map.js\":4}],4:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nrequire('./app.js');\n\nvar gapi = require('google-maps'),\n    $ = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null),\n    arr_unique = require('./modules/array_unique.js');\n\ngapi.KEY = 'AIzaSyA4T9LZ5gwZIHTA550ip33BbLvO9ob1Ji8';\n\nvar map = null;\n\n// These propierties can be overriden by the caller before calling load\nexports.CONTAINER_SELECTOR = '#map';\nexports.LEGEND_SELECTOR = '#legend';\n\n// Fix for weird gmaps problem\nexports.prototype = exports.prototype || Object;\n\nexports.load = function (fn) {\n\n    gapi.load(function (google) {\n        var options = {\n            center: { lng: -73, lat: 4 },\n            zoom: 6,\n            mapTypeId: google.maps.MapTypeId.HYBRID\n        };\n        var $container = $(exports.CONTAINER_SELECTOR);\n        $container.empty();\n\n        map = new google.maps.Map($container[0], options);\n\n        if (fn) fn(google, map);\n        $container.removeClass('loading');\n    });\n};\n\nvar info_windows = [];\nvar default_color_pallete = ['red', 'aqua', 'blue', 'brown', 'green', 'orange', 'pink', 'purple', 'yellow', 'black', 'dark-green', 'dark-blue', 'dark-purple', 'gray'];\n\nexports.setupMarkers = function (data) {\n    var longitude_key = data.longitude_key || 'longitude';\n    var latitude_key = data.latitude_key || 'latitude';\n    var base_url = data.base_url || '';\n    var color_mode = data.color_mode || 'name';\n    var color_key = null;\n    var color_pallete = default_color_pallete;\n    var color_values = null;\n    var color_table = {};\n    var callback = data.on_open_marker || function () {};\n\n    if (color_mode !== 'name' && color_mode !== 'color') color_mode = 'none';\n\n    if (color_mode !== 'none') {\n        if (color_mode === 'name' && data.color_pallete) color_pallete = arr_unique(data.color_pallete.concat(default_color_pallete));\n        if (_typeof(data.color_by) === 'object') {\n            color_key = data.color_by.key;\n            color_values = data.color_by.values;\n        } else if (typeof data.color_by === 'string') {\n            color_key = data.color_by;\n            color_values = arr_unique(data.data.map(function (model) {\n                return modelGet(model, color_key);\n            }));\n        } else {\n            throw 'Must specify valid color_by';\n        }\n\n        if (color_mode === 'name') for (var i = 0; i < color_values.length; ++i) {\n            var color_value = color_values[i];\n            if (i + 1 > color_pallete.length) {\n                color_table[color_value] = 'gray';\n                continue;\n            }\n            color_table[color_value] = color_pallete[i];\n        } else {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = color_values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var _color_value = _step.value;\n\n                    color_table[_color_value.name] = _color_value.color;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }setupLegend(color_table, color_mode, base_url);\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = data.data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var model = _step2.value;\n\n            var content = '';\n            if (data.title_key) content += showTitle(model, data.title_key);\n            if (data.show) content += showFields(model, data.show);\n            if (data.actions) content += showActions(model, data.actions);\n            var info_window = new google.maps.InfoWindow({ content: content });\n            info_windows.push(info_window);\n\n            var color = '';\n            if (color_mode !== 'none') color = modelGet(model, color_key);\n            if (color_mode === 'name') color = color_table[color];else if (color_mode === 'none') color = 'red';\n            var color_url = getColorUrl(color, color_mode, base_url);\n\n            var marker_options = {\n                position: {\n                    lng: Number(modelGet(model, longitude_key)),\n                    lat: Number(modelGet(model, latitude_key))\n                },\n                map: map,\n                icon: color_url\n            };\n\n            var marker = new google.maps.Marker(marker_options);\n\n            marker.addListener('click', markerListener(info_window, marker, callback, model));\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n};\n\nfunction setupLegend(color_table, mode, base_url) {\n    var $legend = $(exports.LEGEND_SELECTOR);\n    for (var key in color_table) {\n        var value = color_table[key];\n        var url = getColorUrl(value, mode, base_url);\n        $legend.append('<p><img width=\"11\" height=\"20\" src=\"' + url + '\">' + key + '</p>');\n    }\n}\n\nfunction showTitle(model, title) {\n    return '<h2 class=\"marker-title\">' + modelGet(model, title) + '</h2>';\n}\n\nfunction showFields(model, fields) {\n    var res = '';\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n        for (var _iterator3 = fields[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var field = _step3.value;\n\n            if (field.nullable && !modelGet(model, field.key)) continue;\n            res += '<div class=\"marker-field\"><span class=\"marker-field-name\">';\n            res += field.display;\n            res += '</span><span class=\"marker-field-value\">';\n            res += modelGet(model, field.key);\n            res += '</span></div>';\n        }\n    } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n            }\n        } finally {\n            if (_didIteratorError3) {\n                throw _iteratorError3;\n            }\n        }\n    }\n\n    return res;\n}\n\nfunction showActions(model, actions) {\n    var res = '<div class=\"marker-actions\">';\n    var links = [];\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n        for (var _iterator4 = actions[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var action = _step4.value;\n\n            var link = '<a href=\"';\n            if (typeof action.url === 'function') link += action.url(model);else link += action.url;\n            link += '\">';\n            link += action.display;\n            link += '</a>';\n            links.push(link);\n        }\n    } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n            }\n        } finally {\n            if (_didIteratorError4) {\n                throw _iteratorError4;\n            }\n        }\n    }\n\n    res += links.join(' | ');\n    res += '</div>';\n    return res;\n}\n\nfunction modelGet(model, key) {\n    var res = model;\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n        for (var _iterator5 = key.split('.')[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var subkey = _step5.value;\n\n            if (res === undefined) throw 'key: ' + key + ' not found in model ' + JSON.stringify(model, null, 2);\n            res = res[subkey];\n            if (Array.isArray(res)) res = res[res.length - 1];\n        }\n    } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n            }\n        } finally {\n            if (_didIteratorError5) {\n                throw _iteratorError5;\n            }\n        }\n    }\n\n    return res;\n}\n\nfunction getColorUrl(color, mode, base_url) {\n    if (mode === 'name') {\n        return base_url + '/images/spotlight-poi-' + color + '.png';\n    } else if (mode === 'color') {\n        // Expand from shorthand\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        color = color.replace(shorthandRegex, function (m, r, g, b) {\n            return r + r + g + g + b + b;\n        });\n        if (color.length == 7) color = color.slice(1);\n        // Pin image from google itself\n        return 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|' + color;\n    }\n}\n\nfunction markerListener(infoWindow, marker, callback, model) {\n    return function () {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n            for (var _iterator6 = info_windows[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var info = _step6.value;\n\n                info.close();\n            }\n        } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                }\n            } finally {\n                if (_didIteratorError6) {\n                    throw _iteratorError6;\n                }\n            }\n        }\n\n        infoWindow.open(map, marker);\n        callback(infoWindow, model);\n    };\n}\n\n// Global export\nwindow.Map = module.exports;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./app.js\":2,\"./modules/array_unique.js\":5,\"google-maps\":1}],5:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (array) {\n    var a = array.concat();\n    for (var i = 0; i < a.length; ++i) {\n        for (var j = i + 1; j < a.length; ++j) {\n            if (a[i] === a[j]) a.splice(j--, 1);\n        }\n    }\n\n    return a;\n};\n\n},{}]},{},[3]);\n"],"file":"fluidos_map_campos.js","sourceRoot":"/source/"}