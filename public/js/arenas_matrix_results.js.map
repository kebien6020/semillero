{"version":3,"names":[],"mappings":"","sources":["arenas_matrix_results.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar $ = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\n$('.success-panel, .error-panel').addClass('alert fade in');\n$().alert();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(require,module,exports){\n(function (global){\n'use strict';\n\nrequire('./app.js');\n\nvar _jquery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Plot options\n// This is passed to flot jQuery plugin\nvar plot_options = {\n    xaxis: {\n        // Log scale on x axis\n        transform: function transform(v) {\n            return v > 0 ? Math.log10(v) : 0;\n        },\n        ticks: function ticks(axis) {\n            var res = [];\n            for (var i = 0; i < axis.max; i += 100) {\n                if (i <= 500) res.push(i);else if (i % 200 === 0) res.push(i);\n            }return res;\n        }\n    },\n    yaxis: {\n        min: 0,\n        max: 100,\n        ticks: 10\n    },\n    grid: {\n        labelMargin: 10,\n        margin: {\n            top: 10,\n            bottom: 20,\n            left: 20\n        }\n    },\n    colors: ['blue', 'gray', 'gray', 'gray', 'gray', 'gray']\n\n    // Module global, jQuery DOM element where the plot is going to be drawn\n};var $plot = null;\n\n// Called when the module loads (see end of file)\nfunction init() {\n    cacheDom();\n    getData().then(renderPlot, handleError);\n}\n\nfunction cacheDom() {\n    $plot = (0, _jquery2.default)('.plot');\n}\n\n// Initiates a JSON request to the server in order to get the plot data\nfunction getData() {\n    var id = $plot.data('sampleGroupId');\n    return _jquery2.default.getJSON('/api/arenas/get_matrix_plot/' + id);\n}\n\n// Renders the plot on the screen using flot jQuery plugin.\n// data is the JSON response (already parsed)\nfunction renderPlot(data) {\n    var min = Math.min(data.points[0].grain_size, data.x10);\n    var x10_line = makeLines(data.x10, 10, min);\n    var x60_line = makeLines(data.x60, 60, min);\n    var x90_line = makeLines(data.x90, 90, min);\n    var x50_line = makeLines(data.x50, 50, min);\n    var x30_line = makeLines(data.x30, 30, min);\n    var series = [flattenPoints(data.points), x10_line, x60_line, x90_line, x50_line, x30_line];\n\n    _jquery2.default.plot($plot, series, plot_options);\n\n    setupAxes();\n}\n\n// Makes a ┐-shaped pair of lines\nfunction makeLines(x, y, min) {\n    return [[min, y], [x, y], [x, 0]];\n}\n\n// Transform [{grain_size: x1, cummulative_rel_freq: y1},...] into [[x1,y1],...]\nfunction flattenPoints(points) {\n    var res = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var point = _step.value;\n\n            res.push([point.grain_size, point.cummulative_rel_freq]);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return res;\n}\n\n// Setup the plot axes labels after the plot is drawn\n// The yaxis label is rotated and centrated vertically\nfunction setupAxes() {\n    // yaxis\n    var $yaxis = (0, _jquery2.default)('<div class=\\'axisLabel yaxisLabel\\'></div>');\n    $yaxis.text('Porcentaje Acumulado en Peso (%)').appendTo($plot);\n\n    // Since CSS transforms use the top-left corner of the label as the transform origin,\n    // we need to center the y-axis label by shifting it down by half its width.\n    // Subtract 20 to factor the chart's bottom margin into the centering.\n    $yaxis.css('margin-top', $yaxis.width() / 2 - 20);\n\n    // xaxis\n    (0, _jquery2.default)('<div class=\\'axisLabel xaxisLabel\\'></div>').text('Tamaño partícula (Micras)').appendTo($plot);\n}\n\n// Called when the JSON request fails\nfunction handleError() {\n    // TODO: print error to DOM\n    alert('Falló la carga de datos para crear el gráfico');\n}\n\ninit();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./app.js\":1}]},{},[2]);\n"],"file":"arenas_matrix_results.js"}